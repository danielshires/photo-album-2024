---
import { getCollection, getEntry, getEntries } from 'astro:content';
import Image from 'astro/components/Image.astro';
import MarkdownWrapper from '../../layouts/MarkdownWrapper.astro';
import type { CollectionEntry } from 'astro:content';
import PostCard from '../../components/PostCard.astro';

export async function getStaticPaths() {
	const posts = await getCollection('posts');
	return posts.map((entry) => ({
		params: { slug: entry.slug },
		props: { entry },
	}));
}

type Props = {
	entry: CollectionEntry<'posts'>;
};

const { entry } = Astro.props;
const { Content } = await entry.render();
const { data: authorData } = await getEntry('team', entry.data.author.id);

const relatedPosts = entry.data.relatedPosts
	? await getEntries(entry.data.relatedPosts)
	: [];
 
---

<MarkdownWrapper frontMatter={entry.data}>
	<div class='flex flex-row gap-3'>
		<Image
			src={authorData.headshot}
			alt={authorData.name}
			class='rounded-full w-12 h-12'
		/>
		<p>{authorData.name}</p>
		<span>·</span>
		<time datetime={entry.data.date.toISOString()}
			>{
				entry.data.date.toLocaleDateString(undefined, {
					dateStyle: 'medium',
					timeZone: 'UTC',
				})
			}</time
		>
		<span>·</span>
	</div>
	<Content />
	<div>
		{
			relatedPosts.length > 0 && (
				<div>
					<h2>Related Posts</h2>
					{relatedPosts.map((p) => (
						<PostCard post={p} />
					))}
				</div>
			)
		}
	</div>
</MarkdownWrapper>
